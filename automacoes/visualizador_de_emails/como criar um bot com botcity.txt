documenta√ß√£o oficial
https://documentation.botcity.dev/pt/tutorials/python-automations/desktop/


Pr√©-requisitos:

Conta BotCity
BotCity Studio SDK
Python 3.7 ou superior


Criando seu Primeiro Projeto¬∂
A BotCity oferece um modelo de projeto que pode ser personalizado por meio de uma ferramenta chamada cookiecutter.

Instalando o Cookiecutter¬∂
Para criarmos um projeto, precisamos primeiro instalar o pacote Python do cookiecutter, executando o seguinte comando em seu terminal de linha de comando:

python -m pip install --upgrade cookiecutter

Depois de fazer isso, voc√™ est√° pronto para criar sua primeira automa√ß√£o Python utilizando o framework da BotCity.

Utilizando o Modelo de Projeto¬∂
Com o cookiecutter devidamente instalado, √© hora de fazer uso dele e criar um novo projeto.

Para criarmos um novo projeto usando o modelo de projeto, vamos invocar o cookiecutter e fornecer como argumento a URL do reposit√≥rio onde os templates da BotCity est√£o localizados:


python -m cookiecutter https://github.com/botcity-dev/bot-python-template/archive/v2.zip
O sistema ir√° solicitar algumas respostas para criar seu projeto.

Quando solicitado project_type escolha a op√ß√£o 1 para Desktop e pressione enter;
Para bot_id, digite HelloBot e pressione enter;
Ap√≥s o t√©rmino do processo acima, uma nova pasta chamada HelloBot estar√° dispon√≠vel.

Sucesso

Parab√©ns, voc√™ agora tem um projeto com o framework Python da BotCity. üèÜ

Vamos agora inspecionar os detalhes deste projeto.

Explorando o Projeto¬∂
Dentro da pasta do seu projeto HelloBot, voc√™ dever√° ter a seguinte estrutura:


HelloBot
‚îú‚îÄ‚îÄ bot.py       <- Aqui √© onde iremos trabalhar e desenvolver nosso rob√¥.
‚îú‚îÄ‚îÄ resources    <- Pasta contendo os arquivos auxiliares para o rob√¥.
‚îú‚îÄ‚îÄ build.bat        <- Script em Batch para gerar o pacote.
‚îú‚îÄ‚îÄ build.ps1        <- Script em PowerShell para gerar o pacote.
‚îú‚îÄ‚îÄ build.sh         <- Shell script para gerar o pacote.
‚îú‚îÄ‚îÄ requirements.txt <- Arquivo descrevendo todas dependencias externas para seu rob√¥.
‚îî‚îÄ‚îÄ HelloBot.botproj <- Arquivo utilizado para carregar o projeto no BotStudio.
Nota

O template de projeto √© composto por v√°rios arquivos e pastas, por√©m aqui est√£o os mais importantes:

bot.py: Altere este arquivo e adicione aqui seu c√≥digo.
resources: Adicione nesta pasta os arquivos a serem utilizados por seu rob√¥ como imagens, planilhas e etc.
requirements.txt: Altere este arquivo e adicione todas as depend√™ncias externas que s√£o utilizadas no c√≥digo.
Sucesso

Toda essa informa√ß√£o √© bem legal mas √© hora de vermos alguma a√ß√£o.

Vamos testar nosso rob√¥ localmente. ü¶æü§ñ

Testando seu Projeto Localmente¬∂
Para testar seu projeto localmente, vamos primeiro instalar as depend√™ncias do Python que est√£o sendo utilizadas no projeto.

Utilizando a linha de comando, acesse a pasta HelloBot que criamos nas etapas anteriores.

Instalando as Depend√™ncias do Projeto¬∂
A partir desta pasta, rode o comando abaixo para instalar as depend√™ncias definidas no arquivo requirements.txt:


pip install --upgrade -r requirements.txt
Este comando vai produzir uma sa√≠da grande referente a instala√ß√£o de todas as depend√™ncias como, por exemplo, o botcity-framework-core e outras.

Assim que este processo terminar, seu projeto estar√° pronto para ser executado.

Executando o Rob√¥¬∂
Nosso modelo de projeto roda um c√≥digo de exemplo bem simples. Este projeto apenas abre seu navegador padr√£o e carrega a p√°gina da BotCity.

Ainda utilizando o terminal aberto dentro da pasta do projeto, voc√™ pode executar sua automa√ß√£o HelloBot com o seguinte comando:


python bot.py